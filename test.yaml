openapi: 3.0.0

info:
  title: E-commerce API
  description: Docement E-commerce API Design 
  version: 1.0.0
  contact: 
    name: Renad
    email: renadyalmghamesi@gmail.com

servers:
  - url: http://localhost:3001

tags: 
 - name: Products
   description: operations on products
 - name: Users
   description: operations on users
 - name: Categories
   description: operations on categories
 - name: Orders
   description: operations on orders

components:
  schemas: 
    Product:
     type: object 
     properties: 
      id: 
        type: number
      title: 
       type: string
      name:
       type: string
       description: product name
      price:
        type: number
      description:
        type: string
        description: product description 
      category:
        $ref: "#/components/schemas/Category"
      image:
        type: string
      rating:
           type: object
           properties:
             rate:
               type: number
             count:
               type: number

    User:
       type: object
       properties:
         id:
           type: number
         name:
           type: string
         email:
           type: string
         password:
           type: string
          
    Category:
       type: object
       properties:
         id:
           type: number
         name:
           type: string
         description:
           type: string

    Order:
       type: object
       properties:
         id:
           type: number
         products:
           type: array
           items:
             $ref: '#/components/schemas/Product'
         totalPrice:
           type: number
 
paths:
  /products:
    get:
      tags:
        - Products
      summary: Retrieve all products
      parameters:
        - in: query
          name: page
          schema:
            type: number
          required: false
      responses:
        200:
          description: list of products
          content: 
           application/json:
            schema:
             type: array
             items:
               $ref: '#/components/schemas/Product'

        500:
          description: server error 
           
    post:
      tags:
        - Products
      summary: craete a proudct
      requestBody: 
          content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Product'
      responses:
        201:
          description: create a product
          content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Product'

        500:
          description: server error 
          
  /products/{productId}:      
    get:
      tags:
        - Products
      summary: get a product
      parameters:
        - in: path
          name: productId
          required: true
          schema:
           type: string
      responses:
        201:
          description: find product by ID 
          content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Product'
        404:
          description: product is not found 
        500:
          description: server error

    delete:
     tags:
        - Products
     summary: delete a product
     parameters:
        - in: path
          name: productId
          required: true
          schema:
           type: string
     responses:
        200:
          description: delete a product by ID 
        404:
          description: product is not found 
        500:
          description: server error
    put:
     tags:
        - Products
     summary: update a product
     parameters:
        - in: path
          name: productId
          required: true
          schema:
           type: string
     requestBody:
      content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Product'
     responses:
        200:
          description: update a product by ID 
          content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Product'
        404:
          description: product is not found 
        500:
          description: server error

  /products/searchText:      
     get:
      tags:
        - Products
      summary: search products
      parameters:
        - in: query
          name: searchText
          required: true
          schema:
           type: string
      responses:
        201:
          description: serach products by name
          content: 
           application/json:
            schema:
              type: array
              items:
               $ref: '#/components/schemas/Product'
        404:
          description: can not find the products
        500:
          description: server error
  /users:
     get:
       tags:
         - Users
       summary: return all users.
       responses:
         200:
           description: A list of users
           content:
             application/json:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/User'
         500:
           description: server error
     post:
       tags:
         - Users
       summary: create a user.
       requestBody:
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/User'
       responses:
         201:
           description: create a user
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/User'
         500:
           description: server error

  /users/{userId}:
     get:
       tags:
         - Users
       summary: get a users
       parameters:
       - in: path
         name: userId
         required: true
         schema:
           type: string
       responses:
         200:
           description: find  user by id 
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/User'
         404:
           description: user not found
         500:
           description: server error

     delete:
       tags:
         - Users
       summary: delete user
       parameters:
       - in: path
         name: userId
         required: true
         schema:
           type: string
       responses:
         200:
           description: delete  user by id 
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/User'
         404:
           description: user not found
         500:
           description: server error

     put:
       tags:
         - Users
       summary: update a user
       parameters:
       - in: path
         name: userId
         required: true
         schema:
           type: string
       responses:
         200:
           description: retrive an updated user by id 
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/User'
         404:
           description: user not found
         500:
           description: server error

  /login:
     post:
       tags:
         - Users
       summary: Login.
       requestBody:
           content:
              application/json:
                schema:
                 type: object
                 properties:
                   email:
                     type: string
                   password:
                     type: string

       responses:
         200:
           description: User autheenticated successfully
         401:
           description: Unauthorized 
         500:
           description: server error
  /logout:
     post:
       tags:
         - Users
       summary: Logout.
       responses:
         200:
           description: User logged out successfully
         500:
           description: server error

  /categories: 
     get:
       tags:
         - Categories
       summary: return all categories.
       responses:
         200:
           description: A list of categories
           content:
             application/json:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/Category'
         500:
           description: server error
     post:
       tags:
         - Categories
       summary: create a categories.
       requestBody:
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/Category'
       responses:
         201:
           description: create a categories
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/Category'
         500:
           description: server error
    
  /categories/{categoryId}:
     get:
       tags:
         - Categories
       summary: get a category
       parameters:
       - in: path
         name: categoryId
         required: true
         schema:
           type: string
       responses:
         200:
           description: find a category by id 
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/Category'
         404:
           description: category not found
         500:
           description: server error

     delete:
       tags:
         - Categories
       summary: delet a category
       parameters:
       - in: path
         name: categoryId
         required: true
         schema:
           type: string
       responses:
         200:
           description: delete a category by id 
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/Category'
         404:
           description: category not found
         500:
           description: server error
        
     put:
       tags:
         - Categories
       summary: update a category
       parameters:
       - in: path
         name: categoryId
         required: true
         schema:
           type: string
       responses:
         200:
           description: retrun an updated category by id 
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/Category'
         404:
           description: category not found
         500:
           description: server error

  /orders:
     get:
       tags:
         - Orders
       summary: return all orders.
       responses:
         200:
           description: A list of orders
           content:
             application/json:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/Order'
         500:
           description: server error

     post:
       tags:
         - Orders
       summary: create a orders.
       requestBody:
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/Order'
       responses:
         201:
           description: create a orders
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/Order'
         500:
           description: server error

  /orders/{orderId}:
     get:
       tags:
         - Orders
       summary: get a order
       parameters:
       - in: path
         name: orderId
         required: true
         schema:
           type: string
       responses:
         200:
           description: find a order by id 
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/Order'
         404:
           description: order not found
         500:
           description: server error

     delete:
       tags:
         - Orders
       summary: delet a order
       parameters:
       - in: path
         name: orderId
         required: true
         schema:
           type: string
       responses:
         200:
           description: delete a order by id 
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/Order'
         404:
           description: order not found
         500:
           description: server error

     put:
       tags:
         - Orders
       summary: update a order
       parameters:
       - in: path
         name: orderId
         required: true
         schema:
           type: string
       responses:
         200:
           description: retrun an updated order by id 
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/Order'
         404:
           description: order not found
         500:
           description: server error
     